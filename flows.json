[
    {
        "id": "7cbe116050851432",
        "type": "tab",
        "label": "Tray Skeleton",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "1e07ee377310fa48",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7889fc72dd04cfa7",
        "type": "group",
        "z": "7cbe116050851432",
        "name": "DB Interface",
        "style": {
            "fill": "#7f8faf",
            "label": true
        },
        "nodes": [
            "a34e18170620e588",
            "a33cc7fb0cd3648e",
            "0211a5e2f47aeea0",
            "7c2432b95f4d2a68",
            "983b4df29435c3a9",
            "5c76e32670100b45",
            "695c2018d6145046",
            "c71fce6a2eeec7a3",
            "84814b5d7100ded0",
            "319b5f4fa4b9c863",
            "cc8f67b0ef80fc63",
            "410156f65a9b70cb",
            "5377f495c83a7a6f",
            "69597493ab2a7f2c",
            "7a2ba09675f33687",
            "548139d24e399cb6",
            "733bf86fb23568be",
            "f7a12a5b2153ebda",
            "1c5888f9c3815e74",
            "99c78bd4a7915cda",
            "a4fb56ba31d2424f",
            "4245789571117f51",
            "bf46890c17141a21",
            "84233c4b075fa088",
            "0c0752b494d2fe83"
        ],
        "x": 74,
        "y": 39,
        "w": 1492,
        "h": 362
    },
    {
        "id": "6ad7c930.1a06b8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Chill Detector",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "5defafc1eace372e",
        "type": "mqtt-broker",
        "name": "box-broker",
        "broker": "blinky-mqtt",
        "port": "1883",
        "clientid": "automation-01",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "a34e18170620e588",
        "type": "function",
        "z": "7cbe116050851432",
        "g": "7889fc72dd04cfa7",
        "name": "Save tray config in Memory",
        "func": "let tray = msg.payload;\nflow.set('tray', msg.payload);\nnode.warn(\"Received tray from database\");\ntray.watchdog.value = 0;\ntray.trayControl.value = 0;\nfor (let icube in tray)\n{\n    if (tray[icube].hasOwnProperty('enabled')) tray[icube].enabled = 0;\n}\n\nreturn [{topic:'publishTray',payload:true},{topic:'initTray',payload:true}];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 360,
        "wires": [
            [
                "84233c4b075fa088"
            ],
            [
                "1c5888f9c3815e74"
            ]
        ]
    },
    {
        "id": "a33cc7fb0cd3648e",
        "type": "inject",
        "z": "7cbe116050851432",
        "g": "7889fc72dd04cfa7",
        "name": "initFlow",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "initFlow",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 160,
        "wires": [
            [
                "0211a5e2f47aeea0"
            ]
        ]
    },
    {
        "id": "0211a5e2f47aeea0",
        "type": "function",
        "z": "7cbe116050851432",
        "g": "7889fc72dd04cfa7",
        "name": "Init flow Variables",
        "func": "var trayProps = {\n    box         :   'bl-fermi-01',\n    type        :   'machine-protection',\n    name        :   '01',\n};\nflow.set('trayProps',trayProps);\nflow.set('tray', null);\nflow.set('settingInProgress', true);\nreturn {topic: \"getTrayProps\", payload: true};  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 160,
        "wires": [
            [
                "5377f495c83a7a6f",
                "410156f65a9b70cb"
            ]
        ]
    },
    {
        "id": "7c2432b95f4d2a68",
        "type": "switch",
        "z": "7cbe116050851432",
        "g": "7889fc72dd04cfa7",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "config",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "echo",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 690,
        "y": 280,
        "wires": [
            [
                "c71fce6a2eeec7a3"
            ],
            [
                "cc8f67b0ef80fc63"
            ],
            [
                "695c2018d6145046"
            ],
            [
                "a34e18170620e588"
            ]
        ]
    },
    {
        "id": "983b4df29435c3a9",
        "type": "function",
        "z": "7cbe116050851432",
        "g": "7889fc72dd04cfa7",
        "name": "Filter MQTT",
        "func": "return {topic:msg.topic.split('/')[5], payload:msg.payload};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 280,
        "wires": [
            [
                "7c2432b95f4d2a68"
            ]
        ]
    },
    {
        "id": "5c76e32670100b45",
        "type": "function",
        "z": "7cbe116050851432",
        "g": "7889fc72dd04cfa7",
        "name": "Publish tray",
        "func": "if (!msg.payload) return null;\nvar tray = flow.get('tray');\nif (tray == null) return null;\nlet newMsg = null;\nlet newMsgTopic = flow.get('trayProps').box + '/tray/' + flow.get('trayProps').type + '/' + flow.get('trayProps').name + '/reading';\nswitch( tray.trayControl.value)\n{\n    case 0:\n        newMsg = {topic: newMsgTopic, payload: JSON.stringify(tray)};\n        break;\n    case -1:\n        tray.trayControl.value = 1;\n        newMsg = {topic: newMsgTopic, payload: JSON.stringify(tray)};\n        break;\n    default:\n        break;\n}\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 280,
        "wires": [
            [
                "f7a12a5b2153ebda"
            ]
        ]
    },
    {
        "id": "695c2018d6145046",
        "type": "function",
        "z": "7cbe116050851432",
        "g": "7889fc72dd04cfa7",
        "name": "Save config file",
        "func": "let cubeAlarm = flow.get('tray')[msg.payload.cube].alarm;\nif (flow.get('tray')[msg.payload.cube].hasOwnProperty('enabled'))\n{\n    if (msg.payload.hasOwnProperty('enabled'))\n    {\n        flow.get('tray')[msg.payload.cube].enabled = msg.payload.enabled;\n    }\n}\ncubeAlarm.limits.lolo = msg.payload.limits.lolo;\ncubeAlarm.limits.low  = msg.payload.limits.low;\ncubeAlarm.limits.high = msg.payload.limits.high;\ncubeAlarm.limits.hihi = msg.payload.limits.hihi;\nreturn {topic:'newData', payload:true};\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 320,
        "wires": [
            [
                "84233c4b075fa088"
            ]
        ]
    },
    {
        "id": "c71fce6a2eeec7a3",
        "type": "function",
        "z": "7cbe116050851432",
        "g": "7889fc72dd04cfa7",
        "name": "Create Setting",
        "func": "let blinkyBusSettingMsg = null;\nlet normalSettingMsg = null;\nlet trayControlMessage = null;\nlet tray = flow.get('tray');\nif (tray == null) return [blinkyBusSettingMsg,normalSettingMsg,trayControlMessage];\nif (tray[msg.payload.cube].hasOwnProperty('enabled'))\n{\n    if (tray[msg.payload.cube].enabled == 0)\n    {\n        return [blinkyBusSettingMsg,normalSettingMsg, trayControlMessage];\n    }\n}\n\nif (msg.payload.cube != 'trayControl') tray[msg.payload.cube].value = msg.payload.value;\n\nswitch (msg.payload.cube) \n{\n    case 'alias':\n        blinkyBusSettingMsg = null;\n        flow.set('settingInProgress', false);\n        normalSettingMsg = { topic: 'newData', payload: true };\n       break;\n    case 'trayControl':\n         switch(msg.payload.value)\n        {\n            case 0:\n                tray.trayControl.value = 0;\n                for (let icube in tray)\n                {\n                    if (tray[icube].hasOwnProperty('enabled')) tray[icube].enabled = 1;\n                }\n                flow.set('settingInProgress', false);\n                break;\n            case 1:\n                tray.trayControl.value = -1;\n                for (let icube in tray)\n                {\n                    if (tray[icube].hasOwnProperty('enabled')) tray[icube].enabled = 0;\n                }\n                if (tray.trayControl.hasOwnProperty('enabled')) tray.trayControl.enabled = 1;\n                flow.set('settingInProgress', true);\n                break;\n            case 2:\n                if (tray.trayControl.value > 0)\n                {\n                    tray.trayControl.value = 2;\n                    flow.set('settingInProgress', true);\n                    let trayProps  = flow.get('trayProps');\n                    let box = trayProps.box;\n                    trayControlMessage =\n                    {\n                        topic: trayProps.box + '/tray/' + trayProps.type + '/' + trayProps.name + '/echo',\n                        payload: JSON.stringify({ topic: box + '/tray/' + trayProps.type + '/' + trayProps.name + '/setting/echo' })\n                    };\n                 }\n                break;\n            default:\n                tray.trayControl.value = 0;\n                flow.set('settingInProgress', false);\n                break;\n        }\n        normalSettingMsg = { topic: 'newData', payload: true };\n        blinkyBusSettingMsg = null;\n        break;\n    default:\n        break;\n}\nreturn [blinkyBusSettingMsg,normalSettingMsg,trayControlMessage];\n\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 220,
        "wires": [
            [
                "0c0752b494d2fe83"
            ],
            [
                "84233c4b075fa088"
            ],
            [
                "f7a12a5b2153ebda"
            ]
        ]
    },
    {
        "id": "84814b5d7100ded0",
        "type": "function",
        "z": "7cbe116050851432",
        "g": "7889fc72dd04cfa7",
        "name": "Request tray from Database",
        "func": "let tray = flow.get('tray');\nif (tray != null) return [null,null];\nlet trayProps  = flow.get('trayProps');\nnode.warn(\"Asking for tray from database\");\nlet box = trayProps.box;\nvar newMsg =\n{\n    topic: trayProps.box + '/tray/' + trayProps.type + '/' + trayProps.name + '/echo',\n    payload: JSON.stringify({ topic: box + '/tray/' + trayProps.type + '/' + trayProps.name + '/setting/echo' })\n};\nreturn [{ topic: \"getTrayProps\", payload: true }, newMsg];  \n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 160,
        "wires": [
            [
                "319b5f4fa4b9c863"
            ],
            [
                "f7a12a5b2153ebda"
            ]
        ]
    },
    {
        "id": "319b5f4fa4b9c863",
        "type": "delay",
        "z": "7cbe116050851432",
        "g": "7889fc72dd04cfa7",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1140,
        "y": 120,
        "wires": [
            [
                "84814b5d7100ded0"
            ]
        ]
    },
    {
        "id": "cc8f67b0ef80fc63",
        "type": "function",
        "z": "7cbe116050851432",
        "g": "7889fc72dd04cfa7",
        "name": "prep ping",
        "func": "return {topic:'newData', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 280,
        "wires": [
            [
                "84233c4b075fa088"
            ]
        ]
    },
    {
        "id": "410156f65a9b70cb",
        "type": "function",
        "z": "7cbe116050851432",
        "g": "7889fc72dd04cfa7",
        "name": "MQTT subscribe topic",
        "func": "let subscribeTopic = flow.get('trayProps').box + \"/tray/\" + flow.get('trayProps').type +'/' + flow.get('trayProps').name + \"/setting/#\";\nif (Number(env.get(\"USEHUB\")) == 1) \n{\n    subscribeTopic = env.get(\"HUBBOX\") + \"/\" +env.get(\"HUBNAME\") + \"/\" + flow.get('trayProps').type +'/' + flow.get('trayProps').name + \"/setting/#\";\n}\nreturn {action:\"subscribe\",topic:subscribeTopic};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 280,
        "wires": [
            [
                "733bf86fb23568be"
            ]
        ]
    },
    {
        "id": "5377f495c83a7a6f",
        "type": "delay",
        "z": "7cbe116050851432",
        "g": "7889fc72dd04cfa7",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 600,
        "y": 160,
        "wires": [
            [
                "84814b5d7100ded0"
            ]
        ]
    },
    {
        "id": "69597493ab2a7f2c",
        "type": "inject",
        "z": "7cbe116050851432",
        "g": "7889fc72dd04cfa7",
        "name": "Archive clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "20",
        "topic": "archiveClock",
        "payload": "",
        "payloadType": "date",
        "x": 880,
        "y": 80,
        "wires": [
            [
                "7a2ba09675f33687"
            ]
        ]
    },
    {
        "id": "7a2ba09675f33687",
        "type": "function",
        "z": "7cbe116050851432",
        "g": "7889fc72dd04cfa7",
        "name": "Archive Pulse",
        "func": "var tray = flow.get('tray');\nvar lastArchive = context.get('lastArchive');\nvar now = new Date().getTime();\nif ((now - lastArchive) <= tray.arcPeriod) return null;\ncontext.set('lastArchive', now);\nreturn {topic:'archivePulse', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastArchive', new Date().getTime());",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 80,
        "wires": [
            [
                "548139d24e399cb6"
            ]
        ]
    },
    {
        "id": "548139d24e399cb6",
        "type": "function",
        "z": "7cbe116050851432",
        "g": "7889fc72dd04cfa7",
        "name": "Publish tray",
        "func": "if (!msg.payload) return null;\nvar tray = flow.get('tray');\nvar newMsg = \n{\n    topic: flow.get('trayProps').box + '/tray/' + flow.get('trayProps').type + '/' + flow.get('trayProps').name + '/archive',\n    payload: JSON.stringify(tray)\n};\nif( tray.trayControl.value > 0) newMsg = null;\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 80,
        "wires": [
            [
                "f7a12a5b2153ebda"
            ]
        ]
    },
    {
        "id": "733bf86fb23568be",
        "type": "mqtt in",
        "z": "7cbe116050851432",
        "g": "7889fc72dd04cfa7",
        "name": "box mqtt",
        "topic": "",
        "qos": "2",
        "datatype": "json",
        "broker": "5defafc1eace372e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 400,
        "y": 280,
        "wires": [
            [
                "983b4df29435c3a9"
            ]
        ]
    },
    {
        "id": "f7a12a5b2153ebda",
        "type": "mqtt out",
        "z": "7cbe116050851432",
        "g": "7889fc72dd04cfa7",
        "name": "box mqtt",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5defafc1eace372e",
        "x": 1380,
        "y": 200,
        "wires": []
    },
    {
        "id": "1c5888f9c3815e74",
        "type": "link out",
        "z": "7cbe116050851432",
        "g": "7889fc72dd04cfa7",
        "name": "initTray out",
        "mode": "link",
        "links": [
            "d42bedf924818982"
        ],
        "x": 1095,
        "y": 360,
        "wires": []
    },
    {
        "id": "99c78bd4a7915cda",
        "type": "link in",
        "z": "7cbe116050851432",
        "g": "7889fc72dd04cfa7",
        "name": "init tray finished",
        "links": [
            "f75837cb27beec99"
        ],
        "x": 1205,
        "y": 360,
        "wires": [
            [
                "4245789571117f51"
            ]
        ]
    },
    {
        "id": "a4fb56ba31d2424f",
        "type": "function",
        "z": "7cbe116050851432",
        "g": "7889fc72dd04cfa7",
        "name": "Init Tray finished",
        "func": "let tray = flow.get('tray');\nflow.set('settingInProgress', false);\nfor (let icube in tray)\n{\n    if (tray[icube].hasOwnProperty('enabled')) tray[icube].enabled = 1;\n}\nreturn {topic:'publishTray',payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 360,
        "wires": [
            [
                "5c76e32670100b45"
            ]
        ]
    },
    {
        "id": "4245789571117f51",
        "type": "delay",
        "z": "7cbe116050851432",
        "g": "7889fc72dd04cfa7",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1300,
        "y": 360,
        "wires": [
            [
                "a4fb56ba31d2424f"
            ]
        ]
    },
    {
        "id": "bf46890c17141a21",
        "type": "link in",
        "z": "7cbe116050851432",
        "g": "7889fc72dd04cfa7",
        "name": "publish Tray In",
        "links": [
            "84233c4b075fa088",
            "c6b65715170e89f3"
        ],
        "x": 1175,
        "y": 280,
        "wires": [
            [
                "5c76e32670100b45"
            ]
        ]
    },
    {
        "id": "84233c4b075fa088",
        "type": "link out",
        "z": "7cbe116050851432",
        "g": "7889fc72dd04cfa7",
        "name": "utility publish",
        "mode": "link",
        "links": [
            "bf46890c17141a21"
        ],
        "x": 1025,
        "y": 280,
        "wires": []
    },
    {
        "id": "c6b65715170e89f3",
        "type": "link out",
        "z": "7cbe116050851432",
        "name": "Publish Readings Out",
        "mode": "link",
        "links": [
            "bf46890c17141a21"
        ],
        "x": 1005,
        "y": 500,
        "wires": []
    },
    {
        "id": "0c0752b494d2fe83",
        "type": "link out",
        "z": "7cbe116050851432",
        "g": "7889fc72dd04cfa7",
        "name": "blinkyBusSetting",
        "mode": "link",
        "links": [
            "254a599f7403564a"
        ],
        "x": 1005,
        "y": 200,
        "wires": []
    },
    {
        "id": "7941c8fbb11fd8f6",
        "type": "function",
        "z": "7cbe116050851432",
        "name": "Add Readings",
        "func": "if (flow.get('settingInProgress')) return null;\nreturn {topic:'publishTray',payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 500,
        "wires": [
            [
                "a64d31f1f50e0f29"
            ]
        ]
    },
    {
        "id": "77659e643332d715",
        "type": "inject",
        "z": "7cbe116050851432",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 500,
        "wires": [
            [
                "7941c8fbb11fd8f6"
            ]
        ]
    },
    {
        "id": "1d7585bd1a0ac583",
        "type": "function",
        "z": "7cbe116050851432",
        "name": "Init BlinkyBus",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 580,
        "wires": [
            [
                "f75837cb27beec99"
            ]
        ]
    },
    {
        "id": "d42bedf924818982",
        "type": "link in",
        "z": "7cbe116050851432",
        "name": "init BlinkyBus In",
        "links": [
            "1c5888f9c3815e74"
        ],
        "x": 175,
        "y": 580,
        "wires": [
            [
                "1d7585bd1a0ac583"
            ]
        ]
    },
    {
        "id": "f75837cb27beec99",
        "type": "link out",
        "z": "7cbe116050851432",
        "name": "init Blinkybus Out",
        "mode": "link",
        "links": [
            "99c78bd4a7915cda"
        ],
        "x": 455,
        "y": 580,
        "wires": []
    },
    {
        "id": "254a599f7403564a",
        "type": "link in",
        "z": "7cbe116050851432",
        "name": "link in 2",
        "links": [
            "0c0752b494d2fe83"
        ],
        "x": 175,
        "y": 660,
        "wires": [
            [
                "15f43d07a1ab37e3"
            ]
        ]
    },
    {
        "id": "15f43d07a1ab37e3",
        "type": "function",
        "z": "7cbe116050851432",
        "name": "set BlinkyBus",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "a64d31f1f50e0f29",
        "type": "function",
        "z": "7cbe116050851432",
        "name": "Readings Alarm Scan",
        "func": "var tray = flow.get('tray');\nvar alarmFlagReading = scalarAlarmScan(tray, 'reading');\nvar alarmFlagSetting = scalarAlarmScan(tray, 'setting');\nreturn msg;\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value != oldAlarmValue) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 500,
        "wires": [
            [
                "c6b65715170e89f3"
            ]
        ]
    }
]